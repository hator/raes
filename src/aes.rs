#[derive(Copy,Clone)]
pub struct Key {
    data: [u8; 16]
}

impl Key {
    pub fn new(data: &[u8; 16]) -> Self {
        Key { data: data.clone() }
    }

    fn expand(&self) -> [Self; 11] {
        let mut keys: [[u8; 4]; 44] = [[0; 4]; 44]; // table of columns

        load_initial_key(&mut keys, &self.data);

        for i in 1..11 {
            ksa_core(&mut keys, i, i*4);
            expand_column(&mut keys, i*4+1);
            expand_column(&mut keys, i*4+2);
            expand_column(&mut keys, i*4+3);
        }

        return columns_to_keys(&keys);

        fn load_initial_key(keys: &mut [[u8;4];44], data: &[u8;16]) {
            let (a, b, c, d) = array_refs![data,4,4,4,4];
            keys[0] = a.clone();
            keys[1] = b.clone();
            keys[2] = c.clone();
            keys[3] = d.clone();
        }

        fn ksa_core(keys: &mut [[u8;4];44], i: usize, column: usize) {
            keys[column][0] = SBOX[keys[column-1][1] as usize];
            keys[column][1] = SBOX[keys[column-1][2] as usize];
            keys[column][2] = SBOX[keys[column-1][3] as usize];
            keys[column][3] = SBOX[keys[column-1][0] as usize];

            keys[column][0] ^= RCON[i];

            keys[column][0] ^= keys[column-4][0];
            keys[column][1] ^= keys[column-4][1];
            keys[column][2] ^= keys[column-4][2];
            keys[column][3] ^= keys[column-4][3];
        }

        fn expand_column(keys: &mut [[u8;4];44], column: usize) {
            keys[column][0] = keys[column-4][0] ^ keys[column-1][0];
            keys[column][1] = keys[column-4][1] ^ keys[column-1][1];
            keys[column][2] = keys[column-4][2] ^ keys[column-1][2];
            keys[column][3] = keys[column-4][3] ^ keys[column-1][3];
        }

        fn columns_to_keys(columns: &[[u8;4];44]) -> [Key; 11] {
            let mut keys = [Key { data: [0;16] }; 11];
            for i in 0..11 {
                keys[i].data[0..4].copy_from_slice(&columns[i*4] as &[u8]);
                keys[i].data[4..8].copy_from_slice(&columns[i*4 + 1] as &[u8]);
                keys[i].data[8..12].copy_from_slice(&columns[i*4 + 2] as &[u8]);
                keys[i].data[12..16].copy_from_slice(&columns[i*4 + 3] as &[u8]);
            }
            return keys;
        }
    }
}


#[derive(Eq,PartialEq,Clone,Copy,Debug)]
pub struct Block {
    data: [u8; 16]
}

impl Block {
    pub fn new(data: &[u8; 16]) -> Block {
        Block { data: data.clone() }
    }

    fn add_round_key(&mut self, key: &Key) {
        for i in 0..16 {
            self.data[i] ^= key.data[i];
        }
    }

    fn sub_bytes(&mut self) {
        for i in 0..16 {
            self.data[i] = SBOX[self.data[i] as usize];
        }
    }

    fn shift_rows(&mut self) {
        let mut new_data = self.data.clone();
        for row in 1..4 {
            for col in 0..4 {
                new_data[col*4 + row] = self.data[((col + row)*4 + row) % 16]
            }
        }
        self.data = new_data;
    }

    fn mix_columns(&mut self) {
        mix_column(&mut self.data[0..4]);
        mix_column(&mut self.data[4..8]);
        mix_column(&mut self.data[8..12]);
        mix_column(&mut self.data[12..16]);

        fn mix_column(col: &mut[u8]) {
            let mut c: [u8; 4] = [0; 4];
            c.copy_from_slice(col);

            col[0] = MUL2[c[0] as usize] ^ MUL3[c[1] as usize] ^ c[2] ^ c[3];
            col[1] = c[0] ^ MUL2[c[1] as usize] ^ MUL3[c[2] as usize] ^ c[3];
            col[2] = c[0] ^ c[1] ^ MUL2[c[2] as usize] ^ MUL3[c[3] as usize];
            col[3] = MUL3[c[0] as usize] ^ c[1] ^ c[2] ^ MUL2[c[3] as usize];
        }
    }
}


pub fn encrypt(key: Key, block: Block) -> Block {
    let mut state = block.clone();
    let keys: [Key; 11] = key.expand();

    state.add_round_key(&keys[0]);

    for i in 1..10 {
        state.sub_bytes();
        state.shift_rows();
        state.mix_columns();
        state.add_round_key(&keys[i]);
    }

    state.sub_bytes();
    state.shift_rows();
    state.add_round_key(&keys[10]);

    return state;
}

const SBOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];

const MUL2: [u8; 256] = [
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
];

const MUL3: [u8; 256] = [
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
];

const RCON: [u8; 256] = [
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
];



#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn encryption_test() {
        let key = Key { data: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] };
        let message = Block { data: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] };
        let expected = Block { data: [0x0a,0x94,0x0b,0xb5,0x41,0x6e,0xf0,0x45
                                     ,0xf1,0xc3,0x94,0x58,0xc6,0x53,0xea,0x5a
                                     ]
                             };
        let encrypted = encrypt(key, message);

        assert_eq!(expected, encrypted);
    }

    #[test]
    fn key_schedule_test() {
        let key = Key { data: [ 0x2b, 0x7e, 0x15, 0x16
                              , 0x28, 0xae, 0xd2, 0xa6
                              , 0xab, 0xf7, 0x15, 0x88
                              , 0x09, 0xcf, 0x4f, 0x3c
                              ]};
        let expected = [ 0xa0, 0xfa, 0xfe, 0x17
                       , 0x88, 0x54, 0x2c, 0xb1
                       , 0x23, 0xa3, 0x39, 0x39
                       , 0x2a, 0x6c, 0x76, 0x05
                       ];

        let expanded = key.expand()[1];

        assert_eq!(expected, expanded.data);
    }

    #[test]
    fn mix_columns_test() {
        let mut block = Block { data:
                                [ 219, 19, 83, 69
                                , 1, 1, 1, 1
                                , 198, 198, 198, 198
                                , 45, 38, 49, 76
                                ] };
        let expected = [ 142, 77, 161, 188
                       , 1, 1, 1, 1
                       , 198, 198, 198, 198
                       , 77, 126, 189, 248
                       ];
        block.mix_columns();
        assert_eq!(expected, block.data);
    }

    #[test]
    fn shift_rows_test() {
        let mut block = Block { data:
                                [ 1, 5, 9, 13
                                , 2, 6, 10, 14
                                , 3, 7, 11, 15
                                , 4, 8, 12, 16
                                ] };
        let expected = [ 1, 6, 11, 16
                       , 2, 7, 12, 13
                       , 3, 8, 9, 14
                       , 4, 5, 10, 15
                       ];
        block.shift_rows();
        assert_eq!(expected, block.data);
    }
}
